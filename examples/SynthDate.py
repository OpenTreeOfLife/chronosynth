import chronosynth
from chronosynth import chronogram
import dendropy
import json


# Grab the phylo only synth tree
#!wget https://files.opentreeoflife.org/synthesis/opentree13.4/output/grafted_solution/grafted_solution.tre

full_synth_tree = dendropy.Tree.get_from_path('grafted_solution.tre', schema = 'newick')

chronogram.build_synth_node_source_ages(ultrametricity_precision=0.01)

##TODO make this into a chronosynth function, that takes a tree and a dates dictionary, 
# and returns the ages file, input tree and citations for the dates!

# From git@github.com:OpenTreeOfLife/ChronoSynth.git
# this file is generated by running examples/conflict_test_all.py
dates = json.load(open("../node_ages.json"))

ages = open("ages",'w')

dated_nodes = set()
undated_nodes = set()
for node in full_synth_tree:
    lab = None
    if node.label:
        if node.label.startswith('mrca'):
            lab = node.label
        elif node.label.startswith('ott'):
            lab = node.label
        else:
            lab = node.label.split()[-1]
        if lab in dates['node_ages']:
            dated_nodes.add(lab)
            age_range = [float(source['age']) for source in dates['node_ages'][lab]]
            age_est = sum(age_range) / len(age_range)
            # This uses the average age across multiple age estimates.
            ages.write("{}\t{}\n".format(node.label, age_est))
        else:
            undated_nodes.add(lab)


len(dated_nodes)

custom_synth_tree.write(path = "bladj_input.tre", schema = "newick")
